#TODO: fill in file path to analysis_data
if (!requireNamespace("BiocManager", quietly=TRUE)) install.packages("BiocManager")
analysis_dir <- normalizePath("~/Desktop/Fall 2025/QBIO 490/analysis_data", mustWork = FALSE)
dir.create(analysis_dir, recursive = TRUE, showWarnings = FALSE)
knitr::opts_knit$set(root.dir = normalizePath("/PATH/TO/analysis_data"))
#TODO: fill in file path to analysis_data
if (!requireNamespace("BiocManager", quietly=TRUE)) install.packages("BiocManager")
analysis_dir <- normalizePath("~/Desktop/Fall 2025/QBIO 490/analysis_data", mustWork = FALSE)
dir.create(analysis_dir, recursive = TRUE, showWarnings = FALSE)
knitr::opts_knit$set(root.dir = normalizePath("/PATH/TO/analysis_data"))
twd(analysis_dir)
#TODO: fill in file path to analysis_data
if (!requireNamespace("BiocManager", quietly=TRUE)) install.packages("BiocManager")
analysis_dir <- normalizePath("~/Desktop/Fall 2025/QBIO 490/analysis_data", mustWork = FALSE)
dir.create(analysis_dir, recursive = TRUE, showWarnings = FALSE)
knitr::opts_knit$set(root.dir = normalizePath("/PATH/TO/analysis_data"))
setwd(data_dir)
#TODO: fill in file path to analysis_data
if (!requireNamespace("BiocManager", quietly=TRUE)) install.packages("BiocManager")
data_dir <- normalizePath("~/Desktop/Fall 2025/QBIO 490/analysis_data", mustWork = FALSE)
if (!dir.exists(data_dir)) dir.create(data_dir, recursive = TRUE)
knitr::opts_knit$set(root.dir = normalizePath("/PATH/TO/analysis_data"))
setwd(data_dir)
knitr::opts_knit$set(root.dir = data_dir)
getwd()  # sanity check
#load & inspect
data(mtcars)
head(mtcars)
str(mtcars)
# Column & row names,
colnames(mtcars)
rownames(mtcars)
mtcars$carb
#load & inspect
data(mtcars)
# Column & row names,
colnames(mtcars)
rownames(mtcars)
mtcars$carb
head(mtcars) # just like in the terminal, you can use head to view the first few rows of a data frame
str(mtcars) # str stands for structure
# add code here
mtcars[2, 4]
# add code here
mtcars[2, 4]
mtcars[, 1]
mtcars[1:5, c(1,4,6)]
mtcars[-(3:30), ]
mtcars[, c(-(1:4), -6)]
mtcars["Duster 360", "mpg"]
# call functions here
mtcars$ # fill in name of carburetor column here
# add code here
colnames(mtcars)
#load & inspect
data(mtcars)
head(mtcars) # just like in the terminal, you can use head to view the first few rows of a data frame
str(mtcars) # str stands for structure
# add code here
colnames(mtcars)
# call functions here
mtcars$carb # fill in name of carburetor column here
# add code here
colnames(mtcars)
rownames(mtcars)
mtcars[2, 4] # access the value from the second row, fourth column (this is the horsepower of a Mazda RX4 Wag)
mtcars[1,  ] # access all values in the first row (all info on the Mazda RX4)
mtcars[ , 1] # access all values in the first column (mpg info for all cars)
mtcars[1:5, c(1, 4, 6)] # rows one through five and columns 1, 4, and 6
mtcars[-(3:30), ] # access everything EXCEPT rows 3 through 30
mtcars[ , c(-(1:4), -6)] # access everything EXCEPT columns 1 through 4 and column 6
mtcars["Duster 360" , "mpg"] # select the mpg (column) for only Duster 360 (row)
data_frame$new_column <- values
# write code here
cars <- c("Duster 360", "Lincoln Continental", "Maserati Bora")
row_idx <- match(cars, rownames(mtcars))
col_idx <- match("hp", colnames(mtcars)
# write code here
data(mtcars)  # make sure it's loaded
cars <- c("Duster 360", "Lincoln Continental", "Maserati Bora")
row_idx <- match(cars, rownames(mtcars))
col_idx <- match("hp", colnames(mtcars))
hp_vals <- mtcars[row_idx, col_idx, drop = TRUE]  # a named vector
names(hp_vals) <- cars
hp_vals
mtcars$hp_per_wt <- mtcars$hp / mtcars$wt
head(mtcars$hp_per_wt)
# write code here
mtcars$transmission <- ifelse(mtcars$am == 0, "automatic", "manual")
# write code here
mtcars$transmission <- ifelse(mtcars$am == 0, "automatic", "manual")
table(mtcars$am, mtcars$transmission)
head(mtcars[, c("am", "transmission")])
am_col <- match("am", colnames(mtcars))  # which column is "am"?
mtcars_copy <- mtcars[, -am_col]
am_col <- match("am", colnames(mtcars))  # which column is "am"?
mtcars_copy <- mtcars[, -am_col]
am_col <- match("am", colnames(mtcars))  # which column is "am"?
mtcars_copy <- mtcars[, -am_col]
df_copy <- df[rows_to_keep, columns_to_keep]
# write code here
am_col <- match("am", colnames(mtcars))
mtcars_copy <- mtcars[, -am_col]
# write code here
colnames(mtcars_copy)   # should not include "am"
head(mtcars_copy)
mtcars_copy <- mtcars[rows_to_keep, columns_to_keep]
rows_to_keep     <- TRUE                      # keep all rows
am_col_index     <- match("am", colnames(mtcars))
columns_to_keep  <- setdiff(seq_len(ncol(mtcars)), am_col_index)
mtcars_copy <- mtcars[rows_to_keep, columns_to_keep]
rows_to_keep     <- TRUE                      # keep all rows
am_col_index     <- match("am", colnames(mtcars))
columns_to_keep  <- setdiff(seq_len(ncol(mtcars)), am_col_index)
mtcars_copy <- mtcars[rows_to_keep, columns_to_keep]
rows_to_keep     <- TRUE                      # keep all rows
am_col_index     <- match("am", colnames(mtcars))
columns_to_keep  <- setdiff(seq_len(ncol(mtcars)), am_col_index)
mtcars_copy <- mtcars[rows_to_keep, columns_to_keep]
mtcars_copy <- mtcars[, colnames(mtcars) != "am"]
rows_to_keep    <- TRUE                                   # keep all rows
am_col_index    <- match("am", colnames(mtcars))          # find the am column index
columns_to_keep <- setdiff(seq_len(ncol(mtcars)), am_col_index)
mtcars_copy <- mtcars[rows_to_keep, columns_to_keep]
#TODO: fill in file path to analysis_data
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
# We'll keep large files OUTSIDE of git but NEXT TO your Rmd
data_dir <- normalizePath("~/Desktop/Fall 2025/QBIO 490/analysis_data", mustWork = FALSE)
if (!dir.exists(data_dir)) dir.create(data_dir, recursive = TRUE)
# Work and knit from there
setwd(data_dir)
knitr::opts_knit$set(root.dir = data_dir)
getwd()  # sanity check
clin_query <- #Fill in correct command
clin_query <- GDCquery(
project       = "TCGA-BRCA",
data.category = "Clinical",
data.type     = "Clinical Supplement",
data.format   = "BCR Biotab",
legacy        = TRUE
)
clin_query <- #Fill in correct command
clin_query <- GDCquery(
project       = "TCGA-BRCA",
data.category = "Clinical",
data.type     = "Clinical Supplement",
data.format   = "BCR Biotab",
legacy        = TRUE
)
clin_query <- GDCquery(
project       = "TCGA-BRCA",
data.category = "Clinical",
data.type     = "Clinical Supplement",
data.format   = "BCR Biotab",
legacy        = TRUE
)
clin_query <- GDCquery(
project       = "TCGA-BRCA",
data.category = "Clinical",
data.type     = "Clinical Supplement",
data.format   = "BCR Biotab",
legacy        = TRUE
)
clin_query <- GDCquery(
project       = "TCGA-BRCA",
data.category = "Clinical",
data.type     = "Clinical Supplement",
data.format   = "BCR Biotab",
legacy        = TRUE
)
# install/load once (skip if already done earlier in notebook)
if (!requireNamespace("TCGAbiolinks", quietly = TRUE)) BiocManager::install("TCGAbiolinks")
dir.create("~/QBIO/qbio_490_tonyyoo/analysis_data", recursive = TRUE, showWarnings = FALSE)
dir.create("~/QBIO/qbio_490_tonyyoo/analysis_data", recursive = TRUE, showWarnings = FALSE)
dir.create("~/QBIO/qbio_490_tonyyoo/analysis_data", recursive = TRUE, showWarnings = FALSE)
dir.create("~/QBIO/qbio_490_tonyyoo/analysis_data", recursive = TRUE, showWarnings = FALSE)
dir.create("~/QBIO/qbio_490_tonyyoo/analysis_data", recursive = TRUE, showWarnings = FALSE)
src_dir <- "~/QBIO/fa25_course_materials"
dst_dir <- "~/QBIO/qbio_490_tonyyoo/analysis_data"
dir.create("~/QBIO/qbio_490_tonyyoo/analysis_data", recursive = TRUE, showWarnings = FALSE)
src_dir <- "~/QBIO/fa25_course_materials"
dst_dir <- "~/QBIO/qbio_490_tonyyoo/analysis_data"
# copy the clinical CSV if it exists
csvs <- list.files(src_dir, pattern = "brca_clinical_data\\.csv$", full.names = TRUE, recursive = TRUE)
if (length(csvs) > 0) file.copy(csvs, dst_dir, overwrite = TRUE)
dir.create("~/QBIO/qbio_490_tonyyoo/analysis_data", recursive = TRUE, showWarnings = FALSE)
src_dir <- "~/QBIO/fa25_course_materials"
dst_dir <- "~/QBIO/qbio_490_tonyyoo/analysis_data"
# copy the clinical CSV if it exists
csvs <- list.files(src_dir, pattern = "brca_clinical_data\\.csv$", full.names = TRUE, recursive = TRUE)
if (length(csvs) > 0) file.copy(csvs, dst_dir, overwrite = TRUE)
# also copy common TCGA folders/files if you have them
if (dir.exists(file.path(src_dir, "GDCdata")))
dir.create(file.path(dst_dir, "GDCdata"), showWarnings = FALSE)
if (dir.exists(file.path(src_dir, "GDCdata")))
invisible(file.copy(list.files(file.path(src_dir, "GDCdata"), full.names = TRUE, recursive = TRUE),
file.path(dst_dir, "GDCdata"), overwrite = TRUE, recursive = TRUE))
dir.create("~/QBIO/qbio_490_tonyyoo/analysis_data", recursive = TRUE, showWarnings = FALSE)
src_dir <- "~/QBIO/fa25_course_materials"
dst_dir <- "~/QBIO/qbio_490_tonyyoo/analysis_data"
# copy the clinical CSV if it exists
csvs <- list.files(src_dir, pattern = "brca_clinical_data\\.csv$", full.names = TRUE, recursive = TRUE)
if (length(csvs) > 0) file.copy(csvs, dst_dir, overwrite = TRUE)
# also copy common TCGA folders/files if you have them
if (dir.exists(file.path(src_dir, "GDCdata")))
dir.create(file.path(dst_dir, "GDCdata"), showWarnings = FALSE)
if (dir.exists(file.path(src_dir, "GDCdata")))
invisible(file.copy(list.files(file.path(src_dir, "GDCdata"), full.names = TRUE, recursive = TRUE),
file.path(dst_dir, "GDCdata"), overwrite = TRUE, recursive = TRUE))
# sanity check: list what’s now in your repo’s analysis_data
list.files(dst_dir, recursive = TRUE)
dir.create("~/QBIO/qbio_490_tonyyoo/analysis_data", recursive = TRUE, showWarnings = FALSE)
src_dir <- "~/QBIO/fa25_course_materials"
dst_dir <- "~/QBIO/qbio_490_tonyyoo/analysis_data"
# copy the clinical CSV if it exists
csvs <- list.files(src_dir, pattern = "brca_clinical_data\\.csv$", full.names = TRUE, recursive = TRUE)
if (length(csvs) > 0) file.copy(csvs, dst_dir, overwrite = TRUE)
# also copy common TCGA folders/files if you have them
if (dir.exists(file.path(src_dir, "GDCdata")))
dir.create(file.path(dst_dir, "GDCdata"), showWarnings = FALSE)
if (dir.exists(file.path(src_dir, "GDCdata")))
invisible(file.copy(list.files(file.path(src_dir, "GDCdata"), full.names = TRUE, recursive = TRUE),
file.path(dst_dir, "GDCdata"), overwrite = TRUE, recursive = TRUE))
# sanity check: list what’s now in your repo’s analysis_data
list.files(dst_dir, recursive = TRUE)
csvs2 <- list.files(src_dir, pattern = "clinical.*\\.csv$", full.names = TRUE, recursive = TRUE, ignore.case = TRUE)
if (length(csvs2) > 0) file.copy(csvs2, dst_dir, overwrite = TRUE)
# ---- Setup (use repo-level analysis_data) ----
data_dir <- normalizePath(file.path("..", "analysis_data"), mustWork = FALSE)
dir.create(data_dir, showWarnings = FALSE, recursive = TRUE)
setwd(data_dir)
knitr::opts_knit$set(root.dir = data_dir)
getwd()  # should end with /QBIO/qbio_490_tonyyoo/analysis_data
# ---- Setup (use repo-level analysis_data) ----
data_dir <- normalizePath(file.path("..", "analysis_data"), mustWork = FALSE)
dir.create(data_dir, showWarnings = FALSE, recursive = TRUE)
setwd(data_dir)
knitr::opts_knit$set(root.dir = data_dir)
getwd()  # should end with /QBIO/qbio_490_tonyyoo/analysis_data
csv_path <- file.path(data_dir, "brca_clinical_data.csv")
if (file.exists(csv_path)) {
clinic <- read.csv(csv_path, stringsAsFactors = FALSE)
} else {
if (!requireNamespace("TCGAbiolinks", quietly = TRUE)) BiocManager::install("TCGAbiolinks")
library(TCGAbiolinks)
clin_query <- GDCquery(project="TCGA-BRCA",
data.category="Clinical",
data.type="Clinical Supplement",
data.format="BCR Biotab",
legacy=TRUE)
GDCdownload(clin_query, method="api")
clinical.BCRtab.all <- GDCprepare(clin_query)
pat_tab <- grep("^clinical_patient_", names(clinical.BCRtab.all), value=TRUE)
clinic <- clinical.BCRtab.all[[pat_tab]]
if (nrow(clinic) >= 2) clinic <- clinic[-c(1,2), , drop=FALSE]
rownames(clinic) <- NULL
if ("bcr_patient_barcode" %in% names(clinic)) {
names(clinic)[names(clinic) == "bcr_patient_barcode"] <- "Tumor_Sample_Barcode"
}
write.csv(clinic, csv_path, row.names = FALSE)
}
# ---- Setup (use repo-level analysis_data) ----
data_dir <- normalizePath(file.path("..", "analysis_data"), mustWork = FALSE)
dir.create(data_dir, showWarnings = FALSE, recursive = TRUE)
setwd(data_dir)
knitr::opts_knit$set(root.dir = data_dir)
getwd()  # should end with /QBIO/qbio_490_tonyyoo/analysis_data
# load the package
library(TCGAbiolinks)
# call it with an explicit namespace to be safe
clin_query <- TCGAbiolinks::GDCquery(
project       = "TCGA-BRCA",
data.category = "Clinical",
data.type     = "Clinical Supplement",
data.format   = "BCR Biotab",
legacy        = TRUE       # <- works in TCGAbiolinks 2.x
)
# ---- Setup (use repo-level analysis_data) ----
data_dir <- normalizePath(file.path("..", "analysis_data"), mustWork = FALSE)
dir.create(data_dir, showWarnings = FALSE, recursive = TRUE)
setwd(data_dir)
knitr::opts_knit$set(root.dir = data_dir)
getwd()  # should end with /QBIO/qbio_490_tonyyoo/analysis_data
# load the package
library(TCGAbiolinks)
# call it with an explicit namespace to be safe
clin_query <- TCGAbiolinks::GDCquery(
project       = "TCGA-BRCA",
data.category = "Clinical",
data.type     = "Clinical Supplement",
data.format   = "BCR Biotab",
legacy        = TRUE       # <- works in TCGAbiolinks 2.x
)
# ---- Setup (use repo-level analysis_data) ----
data_dir <- normalizePath(file.path("..", "analysis_data"), mustWork = FALSE)
dir.create(data_dir, showWarnings = FALSE, recursive = TRUE)
setwd(data_dir)
knitr::opts_knit$set(root.dir = data_dir)
getwd()  # should end with /QBIO/qbio_490_tonyyoo/analysis_data
# load the package
library(TCGAbiolinks)
clin_query <- TCGAbiolinks::GDCquery(
project       = "TCGA-BRCA",
data.category = "Clinical",
data.type     = "Clinical Supplement",
data.format   = "BCR Biotab"
# legacy omitted on this build
)
GDCdownload(clin_query, method = "api")
clinical.BCRtab.all <- GDCprepare(clin_query)
pat_tab <- grep("^clinical_patient_", names(clinical.BCRtab.all), value = TRUE)
clinic <- clinical.BCRtab.all[[pat_tab]]
if (nrow(clinic) >= 2) clinic <- clinic[-c(1,2), , drop = FALSE]
rownames(clinic) <- NULL
names(clinic)[names(clinic) == "bcr_patient_barcode"] <- "Tumor_Sample_Barcode"
csv_path <- file.path(data_dir, "brca_clinical_data.csv")
if (file.exists(csv_path)) {
clinic <- read.csv(csv_path, stringsAsFactors = FALSE)
} else {
if (!requireNamespace("TCGAbiolinks", quietly = TRUE)) BiocManager::install("TCGAbiolinks")
library(TCGAbiolinks)
clin_query <- GDCquery(project="TCGA-BRCA",
data.category="Clinical",
data.type="Clinical Supplement",
data.format="BCR Biotab",
legacy=TRUE)
GDCdownload(clin_query, method="api")
clinical.BCRtab.all <- GDCprepare(clin_query)
pat_tab <- grep("^clinical_patient_", names(clinical.BCRtab.all), value=TRUE)
clinic <- clinical.BCRtab.all[[pat_tab]]
if (nrow(clinic) >= 2) clinic <- clinic[-c(1,2), , drop=FALSE]
rownames(clinic) <- NULL
if ("bcr_patient_barcode" %in% names(clinic)) {
names(clinic)[names(clinic) == "bcr_patient_barcode"] <- "Tumor_Sample_Barcode"
}
write.csv(clinic, csv_path, row.names = FALSE)
}
dir.create("~/QBIO/qbio_490_tonyyoo/analysis_data", recursive = TRUE, showWarnings = FALSE)
dir.create("~/QBIO/qbio_490_tonyyoo/analysis_data", recursive = TRUE, showWarnings = FALSE)
src_dir <- "~/QBIO/fa25_course_materials"
dst_dir <- "~/QBIO/qbio_490_tonyyoo/analysis_data"
# Copy the clinical CSV if it exists (most important for the HW)
csvs <- list.files(src_dir, pattern = "(brca)?_?clinical.*\\.csv$",
full.names = TRUE, recursive = TRUE, ignore.case = TRUE)
if (length(csvs)) file.copy(csvs, dst_dir, overwrite = TRUE)
# If you also see a GDCdata folder and you want it (not required for the HW):
if (dir.exists(file.path(src_dir, "GDCdata"))) {
dir.create(file.path(dst_dir, "GDCdata"), showWarnings = FALSE, recursive = TRUE)
invisible(file.copy(list.files(file.path(src_dir, "GDCdata"), full.names = TRUE, recursive = TRUE),
file.path(dst_dir, "GDCdata"), overwrite = TRUE, recursive = TRUE))
}
# Sanity check: list what’s now in your repo’s analysis_data
list.files(dst_dir, recursive = TRUE)
setwd("~/QBIO/qbio_490_tonyyoo/Week05_Clinical")
# ---- Setup: use repo-level analysis_data ----
data_dir <- normalizePath(file.path("..", "analysis_data"), mustWork = FALSE)
dir.create(data_dir, recursive = TRUE, showWarnings = FALSE)
setwd(data_dir)
knitr::opts_knit$set(root.dir = data_dir)
getwd()  # should print .../QBIO/qbio_490_tonyyoo/analysis_data
# ---- Setup: use repo-level analysis_data ----
data_dir <- normalizePath(file.path("..", "analysis_data"), mustWork = FALSE)
dir.create(data_dir, recursive = TRUE, showWarnings = FALSE)
setwd(data_dir)
knitr::opts_knit$set(root.dir = data_dir)
getwd()  # should print .../QBIO/qbio_490_tonyyoo/analysis_data
# target (inside your repo)
repo_root <- normalizePath("~/QBIO/qbio_490_tonyyoo", mustWork = TRUE)
data_dir  <- file.path(repo_root, "analysis_data")
dir.create(data_dir, recursive = TRUE, showWarnings = FALSE)
# sources where your files might be
srcs <- c(
"~/Desktop/Fall 2025/QBIO 490/analysis_data",
"~/QBIO/fa25_course_materials/analysis_data"
)
# copy any clinical CSVs you already saved
for (s in srcs) {
if (dir.exists(s)) {
file.copy(
list.files(s, pattern = "clinical.*\\.csv$", full.names = TRUE, ignore.case = TRUE),
data_dir,
overwrite = TRUE
)
}
}
# (optional) if you also want the whole GDCdata folder (can be huge)
for (s in srcs) {
if (dir.exists(file.path(s, "GDCdata"))) {
file.copy(file.path(s, "GDCdata"), data_dir, recursive = TRUE, overwrite = TRUE)
}
}
# check what's now in the repo data folder
list.files(data_dir, recursive = TRUE)
setwd(data_dir)
knitr::opts_knit$set(root.dir = data_dir)
getwd()           # should now print .../QBIO/qbio_490_tonyyoo/analysis_data
